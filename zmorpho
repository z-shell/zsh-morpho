#!/usr/bin/env zsh

emulate -LR zsh

zmodload zsh/mathfunc

[ "$1" = "-s" ] && SSAVER_MODE="1"

integer width=10 height=10

# Old system state
typeset -A Ao Bo

# New system state
typeset -A An Bn

# Helper variables
integer index colidx
float color
float shade
float tmp1 tmp2

# Configurations
integer crowsize=7
configs=( #CA#  #CB#   #iter.# #internal mul.#   #factor#  #smooth mul."   #a, b, both#
          10.0  23.39  14      0.0084             1.122    0.3             2
          10.0  23.39  14      0.0105             1.422    0.309           3
          10.0  23.39  14      0.0105             0.1422   0.48            2
) 

float CA=10.0
float CB=23.39
integer C_iter
float C_imul C_factor C_smul
integer C_abboth

# -morpho_solve_one_iteration* vars
integer i j n i_add1 i_sub1 j_add1 j_sub1
integer index index_jadd1 index_iadd1 index_jsub1 index_isub1
float DiA ReA DiB ReB
float Aval Bval
float Anext_x Anext_y Aprev_x Aprev_y
float Bnext_x Bnext_y Bprev_x Bprev_y

# One iteration on An, Bn
# {{{
-morpho_solve_one_iteration() {
    for (( i=1; i<=height; i ++ )); do
        i_add1=1+(i%height)
        i_sub1=i-1
        (( i_sub1 < 1 )) && i_sub1=height

        for (( j=1; j<=width; j ++ )); do
            j_add1=1+(j%width)
            j_sub1=j-1
            (( j_sub1 < 1 )) && j_sub1=width

            index=i*width+j
            index_jadd1=i*width+j_add1
            index_iadd1=i_add1*width+j
            index_jsub1=i*width+j_sub1
            index_isub1=i_sub1*width+j

            Aval=${Ao[$index]}
            Bval=${Bo[$index]}

            # Substance A - its diffusion process
            # DiA=$(( CA * (Anext_x - 2.0 * Aval + Aprev_x  +  Anext_y - 2.0 * Aval + Aprev_y) ))
            DiA=$(( CA * ( ${Ao[$index_jadd1]} - 2.0 * Aval + ${Ao[$index_jsub1]}   +
                           ${Ao[$index_iadd1]} - 2.0 * Aval + ${Ao[$index_isub1]} ) ))
            # ... its reaction process
            ReA=$(( Aval * Bval - Aval - 12.0 ))

            An[$index]=$(( Aval + C_imul * (ReA + DiA) ))

            # Substance B - its diffusion process
            # DiB=$(( CB * (Bnext_x - 2.0 * Bval + Bprev_x  +  Bnext_y - 2.0 * Bval + Bprev_y) ))
            DiB=$(( CB * ( ${Bo[$index_jadd1]} - 2.0 * Bval + ${Bo[$index_jsub1]}   +
                           ${Bo[$index_iadd1]} - 2.0 * Bval + ${Bo[$index_isub1]} ) ))
            # ... its reaction process
            ReB=$(( 16.0 - Aval * Bval ))

            # Euler step
            Bn[$index]=$(( Bval + C_imul * (ReB + DiB) ))
        done
    done
}
# }}}

# One iteration on Ao, Bo
# {{{
-morpho_solve_one_iteration_reversed() {
    for (( i=1; i<=height; i ++ )); do
        i_add1=1+(i%height)
        i_sub1=i-1
        (( i_sub1 < 1 )) && i_sub1=height

        for (( j=1; j<=width; j ++ )); do
            j_add1=1+(j%width)
            j_sub1=j-1
            (( j_sub1 < 1 )) && j_sub1=width

            index=i*width+j
            index_jadd1=i*width+j_add1
            index_iadd1=i_add1*width+j
            index_jsub1=i*width+j_sub1
            index_isub1=i_sub1*width+j

            Aval=${An[$index]}
            Bval=${Bn[$index]}

            # Substance A - its diffusion process
            # DiA=$(( CA * (Anext_x - 2.0 * Aval + Aprev_x  +  Anext_y - 2.0 * Aval + Aprev_y) ))
            DiA=$(( CA * ( ${An[$index_jadd1]} - 2.0 * Aval + ${An[$index_jsub1]}   +
                           ${An[$index_iadd1]} - 2.0 * Aval + ${An[$index_isub1]} ) ))
            # ... its reaction process
            ReA=$(( Aval * Bval - Aval - 12.0 ))

            Ao[$index]=$(( Aval + C_imul * (ReA + DiA) ))

            # Substance B - its diffusion process
            # DiB=$(( CB * (Bnext_x - 2.0 * Bval + Bprev_x  +  Bnext_y - 2.0 * Bval + Bprev_y) ))
            DiB=$(( CB * ( ${Bn[$index_jadd1]} - 2.0 * Bval + ${Bn[$index_jsub1]}   +
                           ${Bn[$index_iadd1]} - 2.0 * Bval + ${Bn[$index_isub1]} ) ))
            # ... its reaction process
            ReB=$(( 16.0 - Aval * Bval ))

            Bo[$index]=$(( Bval + C_imul * (ReB + DiB) ))
        done
    done
}
# }}}

# Main loop
# {{{
-morpho_solve() {
    # Iterations
    for (( n=1; n<=C_iter; n ++ )); do
        # Screen saver mode - every key exits
        [[ "$SSAVER_MODE" = "1" ]] && read -rs -k 1 -t && {
            read -rs -k 1 -t
            read -rs -k 1 -t
            read -rs -k 1 -t
            exit
        }
        -morpho_solve_one_iteration
        [[ "$SSAVER_MODE" = "1" ]] && read -rs -k 1 -t && {
            read -rs -k 1 -t
            read -rs -k 1 -t
            read -rs -k 1 -t
            exit
        }
        -morpho_solve_one_iteration_reversed
    done
}
# }}}

# Initial randomization
# {{{
-morpho_randomize() {
    integer i j
    float prev1=0.0 prev2=0.0
    float new1 new2

    for (( i=1; i<=height; i ++ )); do
        for (( j=1; j<=width; j ++ )); do
            new1=$(( rand48() ))
            (( new1 > prev1 * C_factor )) && new1=new1*C_smul || {
                (( new1 < prev1 / C_factor )) && new1=new1/C_smul
            }

            new2=$(( rand48() ))
            (( new2 > prev2 * C_factor )) && new2=new2*C_smul || {
                (( new2 < prev2 / C_factor )) && new2=new2/C_smul
            }

            # Store into the array
            index=i*width+j
            Ao[$index]=$(( new1*30.0 ))
            Bo[$index]=$(( new2*30.0 ))

            prev1=new1
            prev2=new2
        done
    done
}
# }}}

# Dump values
# {{{
-morpho_dump() {
    print
    for (( i=1; i<=height; i ++ )); do
        for (( j=1; j<=width; j ++ )); do
            index=i*width+j
            LANG=C printf "(%.1f,%.1f)" ${Ao[$index]} ${Bo[$index]}
        done
        print
    done
}
# }}}

# Draw
# {{{
-morpho_render() {
    print
    # Get maximum average
    float max=0.0
    for (( i=1; i<=height; i ++ )); do
        for (( j=1; j<=width; j ++ )); do
            index=i*width+j
            if (( C_abboth == 1 )); then
                tmp1=${Ao[$index]}
                tmp2=${Ao[$index]}
            elif (( C_abboth == 2 )); then
                tmp1=${Bo[$index]}
                tmp2=${Bo[$index]}
            else
                tmp1=${Ao[$index]}
                tmp2=${Bo[$index]}
            fi
            tmp1=$(( (tmp1+tmp2) / 2.0 ))

            if (( max < tmp1 )); then
                max=tmp1
            fi
        done
    done

    for (( i=1; i<=height; i ++ )); do
        for (( j=1; j<=width; j ++ )); do
            index=i*width+j
            if (( C_abboth == 1 )); then
                tmp1=${Ao[$index]}
                tmp2=${Ao[$index]}
            elif (( C_abboth == 2 )); then
                tmp1=${Bo[$index]}
                tmp2=${Bo[$index]}
            else
                tmp1=${Ao[$index]}
                tmp2=${Bo[$index]}
            fi
            tmp1=$(( (tmp1+tmp2) / 2.0 ))

            # 256-color variations
            #(( color=ceil( (tmp1/max)*20.99) ))
            #colidx=color+232

            #(( color=ceil( (tmp1/max)*5.99) ))
            #(( shade=ceil( (tmp1/max)*34.99) ))
            #colidx=color+shade*6+16

            #(( color=ceil( (tmp1/max)*215.99) ))
            #colidx=color
            #colidx=$colortable4[colidx]

            #(( color=ceil( (tmp1/max)*89.99) ))
            #colidx=color
            #colidx=$colortable4[colidx]
            
            #echo -n "\\e[48;5;${colidx}m "

            # 8 colors
            (( color=fabs(ceil(tmp1/max*7.99)) ))
            colidx=$color
            echo -n "\\e[4${colidx}m "

        done
        echo -n "\\e[0m"
    done
}
# }}}

#
# Main code
#

# Standard screen saver before-loop block
fpath+=( "${0%/*}" )
autoload morlib
morlib
-morlib_begin
trap "-morlib_end; exit" TERM INT QUIT
trap "-morlib_end" EXIT
# End of standard screen saver before-loop block

redraw_delay=300

# Main loop
while (( 1 )); do
    width=$(( COLUMNS ))
    height=$(( LINES ))

    #
    # Select configuration
    #

    integer crows=$(( ${#configs} / crowsize ))
    integer crow=$(( (RANDOM % crows) + 1 ))
    #crow=1
    integer cidx=$(( (crow-1)*crowsize + 1 ))

    CA=$configs[cidx]
    CB=$configs[cidx+1]
    C_iter=$configs[cidx+2]
    C_imul=$configs[cidx+3]
    C_factor=$configs[cidx+4]
    C_smul=$configs[cidx+5]
    C_abboth=$configs[cidx+6]

    -morpho_randomize
    -morpho_solve
    -morpho_render

    if [ "$SSAVER_MODE" = "1" ]; then
        -morlib_wait_for_any_key $redraw_delay && exit
    else
        sleep $redraw_delay
    fi
done

# vim:ft=zsh
